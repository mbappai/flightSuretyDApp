import React,{useEffect,useState} from "react";
import Web3 from 'web3';
import "./App.css";


// components
import {Typography,notification,message} from 'antd';
import FlightForm from "./components/flightForm/flightForm.js";
import OperationStatus from "./components/operationStatus/index";
import FlightReport from './components/flightReport/index'
import Airlines from './components/airlines/index'
import Header from './components/header/header'

// config
import Config from './config.json'
import FlightSuretyApp from './contracts/FlightSuretyApp'
import FlightSuretyData from './contracts/FlightSuretyData'
import data from './data.json'
import { unregister } from "./serviceWorker";

const { Title } = Typography;

  let flightSuretyApp;
  let flightSuretyData;
  
  const App = () => {
    

  // const [flightSuretyApp, setFlightSuretyApp] = useState({});
  const [passengers, setPassengers] = useState([])
  const [airlines, setAirlines] = useState([])
  const [flights, setFlights] = useState([])
  const [owner, setOwner] = useState('')
  const [firstAirline, setFirstAirline] = useState();

  const [operationalStatus, setOperationalStatus] = useState(false);

  const setupPassengers = (accounts) =>{
    
    let passengerData = [];
    const passengerNames = data['passengers'];
    for(let i=0; i<accounts.length; i++){
      passengerData.push({
        name:passengerNames[i],
        address:accounts[i]
      })
    }
    setPassengers(passengerData);
  }

  const setupAirlines = async(accounts) =>{

    const airlineNames = data['airlines'];
    const fee = Web3.utils.toWei('10','ether');
    const firstAirlineAddress = accounts[0];
    let inactiveAirlines=[];
    let activeAirlines = [];
    
    for(let i = 0; i <= airlineNames.length-1; i++){
      inactiveAirlines.push({
        // set the first airline to be registered and funded
        // registered: accounts[i] == firstAirline? true :false,
        // isFunded: accounts[i] == firstAirline? true: false,
        address: accounts[i],
        name: airlineNames[i],
      }) 
    }

    for(let airline of inactiveAirlines){
      try{
        // register airlines
        // const results = await flightSuretyApp.methods.registerAirline(airline.address, airline.name).send({from:firstAirlineAddress, gas: 4712388, gasPrice: 100000000000});
        // fund
        const response = await flightSuretyData.methods.fund().send({from:airline.address, value: fee})
        activeAirlines.push({address: airline.address, name: airline.name})
        // console.log('registered:',results)
        console.log('funded:', response)
      }catch(err){
        console.log(err)
      }

    }
   
    setAirlines(activeAirlines);
  }


  const setupFlights = async(accounts,firstAirline) =>{

    const unRegisteredFlights = [];
    const registeredFlights = [];

    const flights = data['flights'];

    for(let i=0; i<accounts.length; i++){
      
     let flight = flights[i].flight;
     let timestamp = flights[i].timestamp;
      
      unRegisteredFlights.push({
        flight:flight,
        timestamp:new Date(timestamp).getTime(),
        airlineAddress:  accounts[i]
      });
    }

    // register flights in contract
    for(let flight of unRegisteredFlights){
      try{
        const result = await flightSuretyApp.methods.registerFlight(flight.timestamp,flight.flight).send({from:firstAirline, gas: 4712388, gasPrice: 100000000000 });
        registeredFlights.push({flight:flight.flight, timestamp: flight.timestamp, airlineAddress: flight.airlineAddress})
        console.log(result);
      }catch(err){
        console.log(err)
      }
    }
    setFlights(registeredFlights);
  }

  const setupOwner = (account) =>{
    setOwner(account);
  }

  const setupFirstAirline = (address) =>{
    setFirstAirline(address);
  }

  const fetchOperationalStatus = async()=>{
    let operationalStatus = await flightSuretyApp.methods.isOperational().call();
    setOperationalStatus(operationalStatus);
   }


  const connectToContract = async()=>{

    // start context here

    // connect to ganache blockchain
    const config = Config['localhost'];
    const web3 = new Web3(new Web3.providers.HttpProvider(config.url));

    // data and app contract instances.
    flightSuretyApp =  new web3.eth.Contract(FlightSuretyApp.abi, config.appAddress);
    flightSuretyData =  new web3.eth.Contract(FlightSuretyData.abi, config.dataAddress);

    // end context here
    
    // fetch all accounts created by ganache
    const accounts = await web3.eth.getAccounts(); 
    
    const firstAirline = accounts[0];
    web3.eth.defaultAccount = firstAirline;

    const airlineAccounts = accounts.slice(0,5);
    const passengerAccounts = accounts.slice(11,17);
    const flightAccounts = accounts.slice(1,4);

    // Both the owner and the first airline uses the same address
    // which is the first account generated by ganache
    setupFirstAirline(firstAirline);
    setupOwner(firstAirline);

    // only required during airline registration.
    // setupAirlines(airlineAccounts);

    setupPassengers(passengerAccounts);
    setupFlights(flightAccounts, firstAirline);

  }



  useEffect(() => {
    console.log('Initializing contract ...')
    connectToContract()
    fetchOperationalStatus()
    return () => {
    };
  }, [])
  

        return (
          <div className="app">
            <div className="layout">

              <Header/>
              <OperationStatus
                status = {operationalStatus}
                />

              <FlightForm
               title={'Insurance'}
               flights={flights}
               passengers = {passengers}
               btnLabel={'Buy Insurance 1ETH'}
               flightSuretyApp = {flightSuretyApp}
               />

              <FlightForm
                title={'FlightStatus'}
                flights={flights}
                passengers = {passengers}
                flightSuretyApp = {flightSuretyApp}
                btnLabel={'Check Flight Status'}
                />
              {/* <FlightReport/> */}
              <Airlines
               airlines={airlines}
               flights = {flights}
               />
            </div>
          </div>
          )
          }


export default App;
